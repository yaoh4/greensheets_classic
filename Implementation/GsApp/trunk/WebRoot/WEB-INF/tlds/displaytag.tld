<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE taglib PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.1//EN" "http://java.sun.com/j2ee/dtds/web-jsptaglibrary_1_1.dtd">
<taglib>
<tlibversion>1.0 b2</tlibversion>
<jspversion>1.2</jspversion>
<shortname>display</shortname>
<uri>http://jakarta.apache.org/taglibs/display</uri>
<info>The display tag library is an open source suite of custom tags that provide high level web presentation
 patterns which will work in a MVC model, and provide a significant amount of functionality while still being simple
 and straight-forward to use. The primary tag in the library is the Table tag.</info>
<tag>
<name>table</name>
<tagclass>org.displaytag.tags.TableTag</tagclass>
<teiclass>org.displaytag.tags.TableTagExtraInfo</teiclass>
<bodycontent>JSP</bodycontent>
<info>Displays a list in an html table, formatting each item in the list according to the Column tags nested inside of this tag.
  Use the list attribute to indicate the Collection of data, in some scope, that the tag  should operate on.  Supports
 the  export of the list data to alternative formats such as CSV, Excel, and XML.  The contents of the list can be sorted,
        and the list can be broken into individual pages for display.

 If you use this tag in Struts, or in some other framework where the page is included via a jsp:include, you should use the requestURI attribute to indicate where
 tag generated links should point.
 </info>
<attribute>
<!--Reference to the object used as source for the table. Can be an expression like
 requestScope.object.property . You must define either the name attribute or the list attribute. List is suggested.-->
<name>list</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--reference to the object used as source for the table. Can be an expression like
               requestScope.object.property. You need to define name or list. List is suggested.
        -->
<name>name</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--@deprecated in displaytag 1.0. Use list.property in "name" attribute.-->
<name>property</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--@deprecated in displaytag 1.0. Use "pageScope.", "requestScope.", "sessionScope.", "applicationScope." prefixes in name.-->
<name>scope</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--number of records to be shown-->
<name>length</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--index of the first record to be shown-->
<name>offset</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--number of records in a page-->
<name>pagesize</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--Fully qualified class name for a TableDecorator.  Use a TableDecorator to provide custom operations
        against the whole list, such as computing totals. Must extend org.displaytag.decorator.TableDecorator. -->
<name>decorator</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--When the present, links for sorting, exports, and paging are formed by adding any tag generated
        parameters to the value of requestURI attribute.-->
<name>requestURI</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--@deprecated html attribute. Use "style" or "class" to set presentational attributes using css.-->
<name>width</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--html pass through attribute-->
<name>style</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--html pass through attribute-->
<name>class</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--@deprecated: use "class"-->
<name>styleClass</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--@deprecated html pass through attribute. Use css "border"-->
<name>border</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--html pass through attribute-->
<name>cellspacing</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--html pass through attribute. Better using "padding" css attribute in style or class-->
<name>cellpadding</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--@deprecated html attribute. Use "style" or "class" to set presentational attributes using css.-->
<name>align</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--@deprecated html attribute. Use "style" or "class" to set presentational attributes using css.-->
<name>background</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--@deprecated html attribute. Use "style" or "class" to set presentational attributes using css.-->
<name>bgcolor</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--html pass through attribute.-->
<name>frame</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--@deprecated html attribute. Use "style" or "class" to set presentational attributes using css.-->
<name>height</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--@deprecated html attribute. Use "style" or "class" to set presentational attributes using css.-->
<name>hspace</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--html pass through attribute. -->
<name>rules</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--html pass through attribute-->
<name>summary</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--@deprecated html attribute. Use "style" or "class" to set presentational attributes using css.-->
<name>vspace</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--enable/disable export. Valid values are true or false -->
<name>export</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--An implicit variable of this name will be created and placed into NESTED scope. The object is
            also added to pageContext under this name.-->
<name>id</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--Use 'page' if you want to sort only visible records, or 'list' if you want to sort the full list-->
<name>sort</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--The index of the column that will be used by default for sorting-->
<name>defaultsort</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
</tag>
<tag>
<name>column</name>
<tagclass>org.displaytag.tags.ColumnTag</tagclass>
<bodycontent>JSP</bodycontent>
<info>Displays a property of a row object inside a table.  MUST be nested inside of a Table tag.
      The value displayed will be the results of a decorator (if any); else the property named by the 'property' attribute;
 or if the 'property' attribute is null, then the results of evaluating the JSP body of the tag.
       </info>
<attribute>
<!--name of the property in the bean specified in the parent table tag (via the "name" attribute) mapped to
                this column-->
<name>property</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--title of the column (text for the th cell)-->
<name>title</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--By default, null values don't appear in the list. By setting 'nulls' to 'true', then
     null values will appear as "null" in the list (mostly useful for debugging).  Defaults to 'false'. -->
<name>nulls</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--@deprecated: use "sortable"-->
<name>sort</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--Set to 'true' to make the column sortable. Defaults to 'false'.-->
<name>sortable</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--Automatically hyperlink URLs and email addresses that appear in the column. Defaults to 'false'.-->
<name>autolink</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--Render the column for the media type(s). The column won't be added to the table if the current request media
        is not supported. Can be any space separated combination of 'html', 'csv', 'xml', 'all', or 'excel'.
        Defaults to 'all'. -->
<name>media</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--The base URL used to construct the dynamic link.
 If this attribute is provided, then the data that is shown for this column is wrapped inside
   a <a href> tag with the url provided through this attribute. Typically you would use
   this attribute along with one of the struts-like param attributes (param*) to create a dynamic
   link so that each row creates a different URL based on the data that is being viewed.
-->
<name>href</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!-- The name of the request parameter that will be dynamically added to the generated href URL.
 The corresponding value is defined by the paramProperty and (optional) paramName attributes,
 optionally scoped by the paramScope attribute.
        -->
<name>paramId</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--   The name of a JSP bean that is a String containing the value for the request parameter named
 by paramId (if paramProperty is not specified), or a JSP bean whose property getter is called
 to return a String (if paramProperty is specified). The JSP bean is constrained to the bean
 scope specified by the paramScope property, if it is specified. If paramName is omitted, then
 it is assumed that the current object being iterated on is the target bean.
-->
<name>paramName</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--@deprecated - use Expressions in paramName.
      The name of a property of the bean specified by the paramName attribute (or the current object
      being iterated on if paramName is not provided), whose return value must be a String containing
      the value of the request parameter (named by the paramId attribute) that will be dynamically
      added to this href URL.
        -->
<name>paramProperty</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--   @deprecated - use Expressions in paramName.
 The scope within which to search for the bean specified by the paramName attribute. If not
  specified, all scopes are searched. If paramName is not provided, then the current object
      being iterated on is assumed to be the target bean.
-->
<name>paramScope</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!-- If this attribute is provided, then the column's displayed is limited to this number of
  characters.  An elipse (...) is appended to the end if this column is linked, and the user
  can mouseover the elipse to get the full text.
 -->
<name>maxLength</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--     If this attribute is provided, then the column's displayed is limited to this number of words.
  An elipse (...) is appended to the end if this column is linked, and the user can mouseover
  the elipse to get the full text.
 -->
<name>maxWords</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--@deprecated; html attribute. Use "style" or "class" to set presentational attributes using css.-->
<name>width</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--html pass through attribute; use this instead of directly coding presentational atttributes.-->
<name>class</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--@deprecated: use "class"-->
<name>styleClass</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--"class" html attribute added only for header cells.-->
<name>headerClass</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--@deprecated: use "headerClass"-->
<name>headerStyleClass</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--@deprecated html attribute. Use "style" or "class" to set presentational attributes using css.-->
<name>align</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--@deprecated html attribute. Use "style" or "class" to set presentational attributes using css.-->
<name>background</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--@deprecated html attribute. Use "style" or "class" to set presentational attributes using css.-->
<name>bgcolor</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--@deprecated html attribute. Use "style" or "class" to set presentational attributes using css.-->
<name>height</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--@deprecated html attribute. Use "style" or "class" to set presentational attributes using css.-->
<name>nowrap</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--@deprecated html attribute. Use "style" or "class" to set presentational attributes using css.-->
<name>valign</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!-- The grouping level (starting at 1 and incrementing) of this column (indicates if successive
 contain the same values, then they should not be displayed).  The level indicates that if a
      lower level no longer matches, then the matching for this higher level should start over as
      well. If this attribute is not included, then no grouping is performed.
-->
<name>group</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--The fully qualified class name of a class that should be used to "decorate" the underlying object
 being displayed. The class should implement org.displaytag.decorator.ColumnDecorator. If a decorator is specified for
 the entire table, then this decorator will decorate that decorator. -->
<name>decorator</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
</tag>
<tag>
<name>setProperty</name>
<tagclass>org.displaytag.tags.SetPropertyTag</tagclass>
<bodycontent>empty</bodycontent>
<info>Sets the indicated property on the enclosing Table tag.  MUST be nested within a Table tag.
 As an alternative, you may create a property file that holds sitewide defaults; see the configuration documentation
 or the DisplayPropertiesLoaderServlet javadoc for information.</info>
<attribute>
<!--The name of the property to set on the enclosing Table tag.-->
<name>name</name>
<required>true</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<!--The value to which the property is set.-->
<name>value</name>
<required>true</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
</tag>
<tag>
<name>footer</name>
<tagclass>org.displaytag.tags.TableFooterTag</tagclass>
<bodycontent>JSP</bodycontent>
<info>Tag wich should be nested into a table tag to provide a custom table footer.
    The body of the tag is outputted as is in the generated table in the tfooter section.</info>
</tag>
</taglib>
