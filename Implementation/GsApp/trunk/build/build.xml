<?xml version="1.0"?>

<project name="greensheets" default="compile" basedir="..">
	<!-- ANT build.xml.
	Target               			   	Description
	clean       		           		Deletes all relevant dirs
	make_deployment_dirs	       	Creates all relevant deployment dirs
	compile			           				Compiles the java source code
	copy_properties_files         Copy configuration files into conf.dir
	javadoc                       Creates java documentation
	war                           Creates war archive
	-->

	<tstamp>
		<format property="start.timestamp" pattern="dd-MMM-yy HH:mm:ss"/>
	</tstamp>
	<echo message="Build started: ${start.timestamp}"></echo>
	<echo message="Ant Java version: ${ant.java.version}"></echo>
	<echo message="System Java version: ${java.version}"></echo>

	<!-- Defined Environment & property files -->

	<property environment="env"/>
	<property file="${basedir}/build/user.properties"/>
	<property file="${basedir}/build/env.properties"/>

	<!-- Define project deployment properties -->

	<property name="app.name"               value="greensheets"/>
	<property name="package.root"           value="gov"/>
	<property name="distribution.dir"       value="./dist" />
	<property name="webcontent.dir"		    	value="./WebRoot" />
	<property name="properties.dir"		    	value="./appconfig" />
	<property name="javadoc.dir"            value="./docs/javadoc" />
	<property name="web.inf.dir"            value="${webcontent.dir}/WEB-INF" />
	<property name="global.lib.dir"					value="./lib" />
	<property name="lib.dir"								value="${web.inf.dir}/lib" />
	<property name="src.dir"                value="./src" />
	<property name="test.dir"               value="./test" />
	<property name="build.test.dir"         value="./build/test-classes" />
	<property name="build.instrumented.dir" value="./build/instrumented-classes" />
	<property name="test.report.dir"        value="./build/test-reports" />
	<property name="cobertura.report.dir"   value="./build/cobertura-reports" />

	<property name="build.dir"              value="./build" />
	<property name="build.war.dir"          value="./build/war" />
	<property name="java.classes.dir"				value="${web.inf.dir}/classes" />
	<property name="app.war.dir"            value="${build.war.dir}/${app.name}"/>
	<property name="app.war.inf"            value="${app.war.dir}/WEB-INF"/>
	<property name="app.war.images"         value="${app.war.dir}/images"/>
	<property name="app.distribution.dir"   value="${distribution.dir}"/>
	<property name="app.name.war"           value="${app.name}.war"/>
	<property name="env.properties.dir"  		value="${properties.dir}/${build.env}"/>
	<property name="build.properties.dir"  	value="${properties.dir}"/>
	<property name="pmd.buildrules"         value="${build.dir}/pmdrules.xml"/>


	<echo message="************************************************************"></echo>
	<echo message="Build started: ${start.timestamp}"></echo>
	<echo message="Building application for   '${build.env}' Environment"></echo>
	<echo message="************************************************************"></echo>


	<!-- Define the project Classpath Settings -->
	<path id="project.classpath">
		<!--<pathelement path="${classpath}"/>-->
		<fileset dir="${lib.dir}">
			<include name="*.jar"/>
		</fileset>
		<fileset erroronmissingdir="false" dir="${global.lib.dir}" includes="**/*.jar"/>
	</path>

	<property name="project.classpath" refid="project.classpath"/>

	<path id="junit-classpath">
		<fileset dir="${lib.dir}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${global.lib.dir}">
			<include name="*.jar" />
		</fileset>
	</path>

	<!-- Create deployment dirs make_deployment_dirs -->
	<target name="make_deployment_dirs" description="create deployment dirs">
		<mkdir dir="${java.classes.dir}"/>
		<mkdir dir="${javadoc.dir}"/>
		<mkdir dir="${distribution.dir}"/>
		<mkdir dir="${app.distribution.dir}"/>
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${build.test.dir}"/>
		<mkdir dir="${build.instrumented.dir}"/>
		<mkdir dir="${test.report.dir}"/>
		<mkdir dir="${global.lib.dir}"/>
		<mkdir dir="${build.war.dir}"/>
		<mkdir dir="${conf.dir}/${app.name}"/>
		<mkdir dir="${app.war.inf}"/>
		<mkdir dir="${app.war.images}"/>
	</target>

	<!-- remove deployment dirs before deoplyment -->
	<target name="clean" description="remove deployment dirs before deploymemt">
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="${java.classes.dir}" includes="**/*"/>
		</delete>
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="${javadoc.dir}" includes="**/*"/>
		</delete>
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="${distribution.dir}" includes="**/*"/>
		</delete>
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="${build.war.dir}" includes="**/*"/>
		</delete>
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="${test.report.dir}"/>
		</delete>
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="${build.test.dir}"/>
		</delete>
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="${build.instrumented.dir}"/>
		</delete>
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="${cobertura.report.dir}"/>
		</delete>
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset dir="${conf.dir}/${app.name}" includes="**/*"/>
		</delete>
	</target>


	<!-- compile project source -->
	<target name="compile" depends="make_deployment_dirs"
		description="compiles the java source files" >
		<javac includeantruntime="false" debug="on"
			classpath="${project.classpath}"
			srcdir="${src.dir}"
		destdir="${java.classes.dir}" />
		<copy todir="${java.classes.dir}">
			<fileset dir="${src.dir}" excludes="**/*.java"/>
		</copy>
	</target>

	<target name="compile-test" depends="compile" description="compiles the java unit test source files using the classpath specified">
		<!-- compile source for junit -->
		<javac srcdir="${test.dir}" destdir="${build.test.dir}" debug="true" optimize="false" failonerror="true" includeantruntime="false">
			<classpath refid="junit-classpath" />
			<classpath location="${java.classes.dir}" />
		</javac>
		<copy todir="${build.test.dir}">
			<fileset dir="${test.dir}">
				<include name="**/*.xml" />
			</fileset>
		</copy>
	</target>

	<!--  copy various proerties files to required directories -->
	<target name="copy_properties_files" depends="make_deployment_dirs"
		description="copies properties files to deployment folders" >
		<!-- copy other properties to conf folder -->
		<echo message="copying property files from : ${build.properties.dir}" />

		<copy todir="${conf.dir}/${app.name}">
			<!--			<fileset dir="${build.properties.dir}">
			<include name="**/*.properties"/>
		</fileset>-->
			<fileset dir="${env.properties.dir}">
				<include name="**/*.properties"/>
			</fileset>
		</copy>
	</target>

	<!-- creat javadoc from the java source files -->
<target name="javadoc" depends="make_deployment_dirs" >
	<javadoc classpath="${project.classpath}"
		destdir="${javadoc.dir}"
		sourcepath="${src.dir}"
	packagenames="${package.root}/*"/>
</target>
<!-- for backward compatibility w AntHill Pro -->
<target name="build" depends="war">
</target>

<!--  build the web archive -->
<target name="war" depends="compile" description="create war file">
	<copy todir="${app.war.dir}">
		<fileset dir="${webcontent.dir}">
			<include name="**/*"/>
		</fileset>
	</copy>

	<!-- create war file -->
	<war destfile="${app.distribution.dir}/${app.name.war}" webxml="${app.war.inf}/web.xml">
		<fileset dir="${app.war.dir}">
			<exclude name="**/web.xml"/>
		</fileset>
		<classes dir="${java.classes.dir}"/>
		<!-- TODO: /WEB-INF/lib should NOT include any jars that aren't meant to go in the war.  Those belong in /lib -->
		<lib dir="${lib.dir}" >
			<exclude name="jasper-runtime.jar"/>
			<exclude name="catalina-ant.jar"/>
			<exclude name="ant-contrib-1.0b2.jar"/>
			<exclude name="activation.jar"/>
			<exclude name="mail.jar"/>
			<exclude name="tomcat/*.jar"/>
			<exclude name="tomcat"/>
		</lib>
	</war>
</target>

<!-- junit -->
<target name="junit" depends="compile-test">
	<junit showoutput="true" printsummary="yes" fork="true" haltonfailure="no">
		<sysproperty key="net.sourceforge.cobertura.datafile" file="${basedir}/cobertura.ser"/>
		<classpath>
			<pathelement location="${build.test.dir}"/>
		</classpath>
		<classpath refid="junit-classpath" />
		<classpath location="${build.dir}" />
		<classpath location="${web.inf.dir}" />
		<classpath location="${java.classes.dir}" />
		<formatter type="xml"/>
		<batchtest fork="yes" todir="${test.report.dir}">
			<fileset dir="${test.dir}" includes="**/*Test.java"/>
		</batchtest>
	</junit>
</target>

<!-- junit with code coverage (COBERTURA 2.1.1) -->
	<target name="junit-coverage" depends="compile-test">

		<fail unless="COBERTURA_HOME" message="ERROR: COBERTURA_HOME variable is not set"/>

		<property name="cobertura.dir" value="${COBERTURA_HOME}"/>
		<path id="cobertura.classpath">
			<fileset dir="${cobertura.dir}">
				<include name="cobertura-2.1.1.jar"/>
				<include name="lib/**/*.jar"/>
			</fileset>
		</path>

		<taskdef classpathref="cobertura.classpath" resource="tasks.properties"/>

		<cobertura-instrument todir="${build.instrumented.dir}">
			<ignore regex="org.apache.log4j.*" />
			<fileset dir="${java.classes.dir}">
				<include name="**/*.class" />
				<exclude name="**/*Test.class" />
			</fileset>
		</cobertura-instrument>

		<copy todir="${build.instrumented.dir}">
			<fileset dir="${src.dir}">
				<include name="**/*.xml" />
				<include name="**/*.properties" />
			</fileset>
		</copy>

		<junit showoutput="true" printsummary="yes" fork="true" haltonfailure="no">
			<sysproperty key="net.sourceforge.cobertura.datafile" file="${basedir}/cobertura.ser"/>
			<classpath>
				<pathelement location="${build.test.dir}"/>
			</classpath>
			<classpath refid="junit-classpath" />
			<classpath location="${build.instrumented.dir}" />
			<classpath location="${build.dir}" />
			<classpath location="${web.inf.dir}" />
			<classpath location="${java.classes.dir}" />
			<classpath refid="cobertura.classpath" />
			<formatter type="xml"/>
			<batchtest fork="yes" todir="${test.report.dir}">
				<fileset dir="${test.dir}" includes="**/*Test.java"/>
			</batchtest>
		</junit>
		<cobertura-report format="xml" destdir="${cobertura.report.dir}" srcdir="${java.src.dir}" />
	</target>

<!-- ================== PMD : static analysis checks on code =================== -->
<target name="pmd">

	<fail unless="PMD_HOME" message="ERROR: PMD_HOME variable is not set"/>

	<echo message="PMD DIR: ${PMD_HOME}"></echo>
	<property name="pmd.dir" value="${PMD_HOME}" />
	<path id="pmd.classpath">
		<fileset dir="${pmd.dir}/lib/">
			<include name="*.jar" />
		</fileset>
	</path>
	<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="pmd.classpath" />

	<pmd failOnRuleViolation="no" >
		<ruleset>rulesets/java/basic.xml</ruleset>
		<ruleset>rulesets/java/braces.xml</ruleset>
		<ruleset>rulesets/java/design.xml</ruleset>
		<ruleset>rulesets/java/imports.xml</ruleset>
		<ruleset>rulesets/java/strings.xml</ruleset>
		<ruleset>rulesets/java/unusedcode.xml</ruleset>
		<formatter type="xml" toFile="pmd.xml"/>
		<fileset dir="${src.dir}">
			<include name="**/*.java"/>
		</fileset>
	</pmd>
</target>

<!-- ================== PMD : static analysis checks on code =================== -->
<target name="findbugs">

	<fail unless="FINDBUGS_HOME" message="ERROR: FINDBUGS_HOME variable is not set"/>

	<echo message="FindBugs HOME: ${FINDBUGS_HOME}"></echo>
	<property name="findbugs.dir" value="${FINDBUGS_HOME}" />
	<path id="findbugs.classpath">
		<fileset dir="${findbugs.dir}/lib/">
			<include name="*.jar" />
		</fileset>
	</path>
	<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpathref="findbugs.classpath" />

	<findbugs home="${findbugs.dir}" output="xml" outputFile="findbugs.xml">
		<auxClasspath path="${project.classpath}"/>
		<sourcePath path="${src.dir}" />
		<class location="${java.classes.dir}" />
	</findbugs>
</target>

</project>
